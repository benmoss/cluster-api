// Code generated by counterfeiter. DO NOT EDIT.
package operationsfakes

import (
	"sync"

	"sigs.k8s.io/cluster-api/controlplane/kubeadm/operations"
)

type FakeControlPlane struct {
	HasDeletingMachineStub        func() bool
	hasDeletingMachineMutex       sync.RWMutex
	hasDeletingMachineArgsForCall []struct {
	}
	hasDeletingMachineReturns struct {
		result1 bool
	}
	hasDeletingMachineReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeControlPlane) HasDeletingMachine() bool {
	fake.hasDeletingMachineMutex.Lock()
	ret, specificReturn := fake.hasDeletingMachineReturnsOnCall[len(fake.hasDeletingMachineArgsForCall)]
	fake.hasDeletingMachineArgsForCall = append(fake.hasDeletingMachineArgsForCall, struct {
	}{})
	fake.recordInvocation("HasDeletingMachine", []interface{}{})
	fake.hasDeletingMachineMutex.Unlock()
	if fake.HasDeletingMachineStub != nil {
		return fake.HasDeletingMachineStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.hasDeletingMachineReturns
	return fakeReturns.result1
}

func (fake *FakeControlPlane) HasDeletingMachineCallCount() int {
	fake.hasDeletingMachineMutex.RLock()
	defer fake.hasDeletingMachineMutex.RUnlock()
	return len(fake.hasDeletingMachineArgsForCall)
}

func (fake *FakeControlPlane) HasDeletingMachineCalls(stub func() bool) {
	fake.hasDeletingMachineMutex.Lock()
	defer fake.hasDeletingMachineMutex.Unlock()
	fake.HasDeletingMachineStub = stub
}

func (fake *FakeControlPlane) HasDeletingMachineReturns(result1 bool) {
	fake.hasDeletingMachineMutex.Lock()
	defer fake.hasDeletingMachineMutex.Unlock()
	fake.HasDeletingMachineStub = nil
	fake.hasDeletingMachineReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeControlPlane) HasDeletingMachineReturnsOnCall(i int, result1 bool) {
	fake.hasDeletingMachineMutex.Lock()
	defer fake.hasDeletingMachineMutex.Unlock()
	fake.HasDeletingMachineStub = nil
	if fake.hasDeletingMachineReturnsOnCall == nil {
		fake.hasDeletingMachineReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasDeletingMachineReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeControlPlane) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hasDeletingMachineMutex.RLock()
	defer fake.hasDeletingMachineMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeControlPlane) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ operations.ControlPlane = new(FakeControlPlane)
