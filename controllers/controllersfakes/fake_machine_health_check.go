// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	"sigs.k8s.io/cluster-api/util"
)

type FakeMachineHealthCheck struct {
	RemediateStub        func(context.Context, util.FilterableMachineCollection) (bool, error)
	remediateMutex       sync.RWMutex
	remediateArgsForCall []struct {
		arg1 context.Context
		arg2 util.FilterableMachineCollection
	}
	remediateReturns struct {
		result1 bool
		result2 error
	}
	remediateReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMachineHealthCheck) Remediate(arg1 context.Context, arg2 util.FilterableMachineCollection) (bool, error) {
	fake.remediateMutex.Lock()
	ret, specificReturn := fake.remediateReturnsOnCall[len(fake.remediateArgsForCall)]
	fake.remediateArgsForCall = append(fake.remediateArgsForCall, struct {
		arg1 context.Context
		arg2 util.FilterableMachineCollection
	}{arg1, arg2})
	fake.recordInvocation("Remediate", []interface{}{arg1, arg2})
	fake.remediateMutex.Unlock()
	if fake.RemediateStub != nil {
		return fake.RemediateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.remediateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMachineHealthCheck) RemediateCallCount() int {
	fake.remediateMutex.RLock()
	defer fake.remediateMutex.RUnlock()
	return len(fake.remediateArgsForCall)
}

func (fake *FakeMachineHealthCheck) RemediateCalls(stub func(context.Context, util.FilterableMachineCollection) (bool, error)) {
	fake.remediateMutex.Lock()
	defer fake.remediateMutex.Unlock()
	fake.RemediateStub = stub
}

func (fake *FakeMachineHealthCheck) RemediateArgsForCall(i int) (context.Context, util.FilterableMachineCollection) {
	fake.remediateMutex.RLock()
	defer fake.remediateMutex.RUnlock()
	argsForCall := fake.remediateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMachineHealthCheck) RemediateReturns(result1 bool, result2 error) {
	fake.remediateMutex.Lock()
	defer fake.remediateMutex.Unlock()
	fake.RemediateStub = nil
	fake.remediateReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMachineHealthCheck) RemediateReturnsOnCall(i int, result1 bool, result2 error) {
	fake.remediateMutex.Lock()
	defer fake.remediateMutex.Unlock()
	fake.RemediateStub = nil
	if fake.remediateReturnsOnCall == nil {
		fake.remediateReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.remediateReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMachineHealthCheck) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.remediateMutex.RLock()
	defer fake.remediateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMachineHealthCheck) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
